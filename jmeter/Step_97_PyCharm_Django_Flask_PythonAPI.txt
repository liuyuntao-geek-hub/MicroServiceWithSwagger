
Django
https://www.tutorialspoint.com/django/django_creating_project.htm

Flask
https://www.tutorialspoint.com/flask

Django with Pycharm
https://automationpanda.com/2017/09/14/django-projects-in-pycharm-community-edition/

Notebook with Diango
https://medium.com/@eleroy/using-django-in-jupyter-notebook-5f09073878bb
https://stackoverflow.com/questions/35483328/how-to-setup-jupyter-ipython-notebook-for-django

RestAPI wiht Flask
https://realpython.com/flask-connexion-rest-api/



Step 1 - PySpark + PyCharm + Anaconda
https://dimajix.de/running-pyspark-on-anaconda-in-pycharm/?lang=en
	Action 1 - Download anaconda: https://conda.io/docs/user-guide/install/download.html
		C:\Users\yuntliu\Documents\workstation\Software\Anaconda
		/home/yuntao/workstation/install/anaconda
		(Make sure download Python 2.7)
	Action 2 - Install on C:\java\anaconda2
		/home/yuntao/workstation/anaconda2
		- Skip the MicroSoft vCore Visual Studio
	Action 3 - Start Anaconda Navigator
		+ create environment: python2.7
		C:\java\anaconda2\envs\python27
	Action 4 - Download PyCharm
		https://www.jetbrains.com/pycharm/download/#section=windows
		C:\Users\yuntliu\Documents\workstation\Software\pycharm
	Action 5 - Install PyCharm
		C:\java\pyCharm
	Action 6 - Download pySpark
		http://spark.apache.org/downloads.html
		C:\Users\yuntliu\Documents\workstation\Software\pySpark
		C:\java\pySpark
	Action 7 - Install pipenv
	https://www.jetbrains.com/help/pycharm/pipenv.html
		cd C:\java\anaconda2\Scripts
		pip install --user pipenv
	output screen has the following:
		C:\Users\yuntliu\AppData\Roaming\Python\Scripts\pipenv.exe
	Action 7 - Setup pySpark within PyCharm
		- new project:
			Path:C:\Users\yuntliu\Documents\workstation\Study\python\pySpark\workSpace\FirstPySpark
		- new Environment user: PipEnv:
			Base Interpreter: C:\java\anaconda2\envs\python27\python.exe
			pipenv: C:\Users\yuntliu\AppData\Roaming\Python\Scripts\pipenv.exe
		
	Action 8 - Add PySpark
		-> File -> settings -> project: FirstPySpark -> Project interpreter => make sure you select the python.exe 2.7
		=> Project Structure => Add ContentRoot: C:\java\pySpark\spark-2.2.0-bin-hadoop2.6\spark-2.2.0-bin-hadoop2\spark-2.2.0-bin-hadoop2.6\python
		=> add contentRoot: C:\java\pySpark\spark-2.2.0-bin-hadoop2.6\spark-2.2.0-bin-hadoop2\spark-2.2.0-bin-hadoop2.6\python\lib\py4j-0.10.4-src.zip
		=> apply will take a while

	Action 9 - -> File -> settings -> project: FirstPySpark -> Project interpreter => adding different package here
		=> if  try to add pyspark package here = not working = it seems it need local spark 

https://changhsinlee.com/install-pyspark-windows-jupyter/

==============================================
----- On Linux & Works ----------------

Action 1 - Download anaconda: https://conda.io/docs/user-guide/install/download.html
	/home/yuntao/workstation/install/anaconda
	(Make sure download Python 2.7)
	
Action 2 - Install on 
	/home/yuntao/workstation/anaconda2
	- Skip the MicroSoft vCore Visual Studio
Action 3 - Start Anaconda Navigator
	/home/yuntao/workstation/anaconda2/bin> ./anaconda-navigator 
	+ create environment: python2.7
	/home/yuntao/workstation/anaconda2/envs/python27
	(This is GUI)
Action 4 - Download & Install PyCharm
	https://www.jetbrains.com/pycharm/download/
	/home/yuntao/workstation/install/pyCharm/pycharm-community-2018.2.2/bin
Action 5 - Start PyCharm
	/home/yuntao/workstation/install/pyCharm/pycharm-community-2018.2.2/bin/pyCharm.sh
Action 6 - Download pySpark
https://spark.apache.org/downloads.html
	/home/yuntao/workstation/install/spark-2.2.0-bin-hadoop2.7
	
Action 7 - Install pipenv
	pip install --user pipenv
	python -m site --user-base
	output: /home/yuntao/.local
		This is where the pipenv located
	export PATH=$PATH:/home/yuntao/.local/bin
Action 8 - Setup pySpark within PyCharm
	- new project:
		Path:/home/yuntao/workstation/pySparkWorkSpace/SecondPySparkWithPython27
	- new Environment user: PipEnv:
		Base Interpreter: /usr/bin/python2.7
			(anaconda one does not work - use the default system native one)
		pipenv: (auto-detect) /home/yuntao/.local/bin/pipenv

Action 8 - Add PySpark
	-> File -> settings -> project: FirstPySpark -> Project interpreter => make sure you select the python.exe 2.7
	=> Project Structure => Add ContentRoot: C:\java\pySpark\spark-2.2.0-bin-hadoop2.6\spark-2.2.0-bin-hadoop2\spark-2.2.0-bin-hadoop2.6\python
	=> add contentRoot: C:\java\pySpark\spark-2.2.0-bin-hadoop2.6\spark-2.2.0-bin-hadoop2\spark-2.2.0-bin-hadoop2.6\python\lib\py4j-0.10.4-src.zip
	=> apply will take a while
		
Action 9 - install all the dependency package	
	pip install numpy scipy matplotlib ipython jupyter pandas sympy nose

	Since we are using python 2.7 => use the following
	/usr/bin/pip2.7 install numpy scipy matplotlib ipython jupyter pandas sympy nose sklearn
		- do this without upgrade pip or setuptools
			- the version come with python34 works
		- all libs will be installed at:
			/usr/lib/python2.7/site-packages
			
Note: these packages will be use in the site-packages

Action 10 - install package in PyCharm could be different
	- File -> settings -> project: FirstPySpark -> Project interpreter => make sure you select the python.exe 2.7
		= add package by:
		= Make sure matplotlib 1.5.3 version is selected, later version only works for 3.x
	

Note:
-----------------
	lambda: can only has one line of function
	Lambda: cannot do print for python 2.7 = in python 2.7: print is statement

------------------

PySpark:
	- Spark DataFrame = Cannot use Python pandas function + can use pyspark.ml. data science function
	- To use Pandas function => need to load from Spark DataFrame to Pandas DataFrame => calculation = memory consuming


========================================================

Step 1 - Install Dash
===== All need to run on Anaconda Prompt 3 ===============
cd C:\Users\yuntliu\Documents\workstation\Study\python\DeloitteMachineLearningTraining\anthem\day_5\plotly_dash
pip install -r "00 resources/requirements.txt"
	- This install the dashboard
python "01 simple dashboards/00 simple_flask.py"
	- This start the service
http://127.0.0.1:5000/my_app
	- This is how to call the function
	
	
python "01 simple dashboards/02 barchart_v1.py"
http://127.0.0.1:8050/
	- This build a bar chart with dash package - wrapper of Flask\
	- You can do HTML inside it

python "01 simple dashboards/03 barchart_v2.py"
http://127.0.0.1:8050/

python "02 basic dashboards/header and logo.py"
http://127.0.0.1:8050/

python "02 basic dashboards/two_charts.py"
http://127.0.0.1:8050/


python "05 tabs and pages\multi-page app/home.py"
- This give different pages application

pickle = save the files



Flask = Python Web Framework
Django = 

==========================================================


==============================================
*********** First Flask ******************
==============================================
https://realpython.com/flask-connexion-rest-api/
C:\Users\yuntliu\Documents\workstation\Study\python\DeloitteMachineLearningTraining\anthem\day_5\plotly_dash\01 simple dashboards

''' SIMPLE FLASK APP '''


''' import the Class '''
from flask import Flask     # flask is the framework here, while Flask is a Python class datatype.


''' instantiate the Class'''
app = Flask(__name__)       # once we import Flask, we need to create an instance of the Flask class for our web app.
                            # __name__ is a special variable that gets as value the string "__main__" when you’re executing the script.
                            # using "app" is an arbitrary convention, but be consistent.


''' define a function '''
@app.route('/my_app')       # This line is a function decorator, mapping the function follows to localhost:5000/my_app
def home():                 # we define a function that returns the string “Hey there!”.
    return "Hey there!"


''' execute '''
if __name__ == '__main__':  # This is only true when the script is executed. If it is imported, it will be false.
    app.run()     # Prints out possible Python errors on the web page helping us trace the errors. Only use in Dev, not Prod.

# Source: https://pythonhow.com/how-a-flask-app-works/

=================================================
Step 1 - Concepts:
	Flask = Come with Python package
	Running with Jupyter = will work any way
	Using Python xxx.py will work too

=========================================
*********** PyCharm with Django ********
=========================================
Step 1 - Download PyCharm
	https://www.jetbrains.com/pycharm/download/#section=windows
	C:\Users\yuntliu\Documents\workstation\Software\pycharm
	
Step 2 - Install PyCharm
	C:\java\pyCharm
	
Step 3 - Start Anaconda Prompt 3 - This is a virtualenv
(Everything need to run under virtualenv - Anaconda )

Step 4 - Install Django
	https://docs.djangoproject.com/en/1.11/topics/install/#installing-official-release

	Action 1 - Clone Diango
cd C:\Users\yuntliu\Documents\workstation\Study\python\Django
git clone git://github.com/django/django.git

	Action 2 - install and activate django	
pip install -e django/


	Action 3 - Test the django: 
cd C:\Users\yuntliu\Documents\workstation\Study\python\Django\workspace\
jupyter notebook

C:\Users\yuntliu\Documents\workstation\Study\python\Django\workspace\Django_001_sample.ipynb
-----------
import django
print(django.get_version())
-------------------

	Action 4 - create project - Anaconda Prompt 3 
django-admin startproject mysite
	= This created the following folders:
	(The following folders should be put in /var/www  )
---------------------
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py
--------------------------

	Action 5 - run manage.py => cannot run this as jupyter => need to run within Anaconda prompt 3

https://docs.djangoproject.com/en/1.11/intro/tutorial01/
	- How to run Django and create Django project
cd C:\Users\yuntliu\Documents\workstation\Study\python\Django\workspace\mysite
python manage.py runserver 8080
 
	http://127.0.0.1:8080/

	Action 6 - reference for Django:
https://medium.com/@eleroy/using-django-in-jupyter-notebook-5f09073878bb

	Action 7 - create newapp within the project => run this in Anaconda Prompt 3 
cd C:\Users\yuntliu\Documents\workstation\Study\python\Django\workspace\mysite
django-admin startapp newapp

Step 5 - Open new project in PyCharm
https://automationpanda.com/2017/09/14/django-projects-in-pycharm-community-edition/

	Start PyCharm - do this within Anaconda 3:

	C:\java\pyCharm\bin\pycharm.exe

	Open Project-> C:\Users\yuntliu\Documents\workstation\Study\python\Django\workspace\mysite

Step 6 - Setup environment for Pycharm:
	File -> settings -> Project: mysite -> Project Interpreter 
		Virtualenv Environment -> add:
			Base Interpreter: C:\java\anaconda3\python.exe
		+ package: django 
	External Libraries: -> site-packages => has all the packages

Step 7 - Run project from configuration
	Run -> Edit Configurations 
		right click Python => new + 
			Name: Diango: runserver
			Script path: C:\Users\yuntliu\Documents\workstation\Study\python\Django\workspace\mysite\manage.py
			Parameters: runserver
			Environment Variable: PYTHONUNBUFFERED=1
			Working Directory: C:\Users\yuntliu\Documents\workstation\Study\python\Django\workspace\mysite
=============================================================
************* Section - Django *********************
=============================================================
https://www.tutorialspoint.com/django/index.htm
Step 0 - Structure
	Django = Framework => lib for python = everything you need to create API or WebService
	Flask = mini version of Django => lib for python => lightway and you can create one page in minutes
	Django = Has a Dev Web Server embedded => this is just for test run on your dev environment or within IDE
	
	WebServer: Nginx (Similar to Tomcat)
		- handle basic HTTP static request
		(In apache world, HTML will be handled by Tomcat without websphere)
	
	AppServer: Gunicorn and/or uWSGI and/or Mod_WSGI (Similar to websphere)
		- handle more robust dynamic request
		(In apache world, webSphere will handle EJB JSP and so on)
		
	outside world <-> Nginx <-> The socket <-> Gunicorn

Roadmap for Deployment
https://www.digitalocean.com/community/tutorials/django-server-comparison-the-development-server-mod_wsgi-uwsgi-and-gunicorn
https://serverfault.com/questions/331256/why-do-i-need-nginx-and-something-like-gunicorn
	Action 1 - Develop Django and then, run on Django Dev Server => which is embedded within Django package = Testing only
		Run testing Django embedded server itself:
		------------ver
		
		django-admin.py runserver
		-----------------------
		Run App you developed with testing ser
		--------------
		python manage.py runserver 8080
		---------------------
	Action 2 - Deploy to Mod_WSGI
		Mod_WSGI => AppServer working with apache
		- You do not really need Nginx because this is assuming you have apache
		---------------
		WSGIScriptAlias /yourapp /opt/yourenv/yourapp.wsgi
		--------------------
	Action 3 - Deploy to uWSGI (replace Action 2 - with this = no need Action 2) - pronouce as (AH SGEE)
		uWSGI = AppServer working with nGinx Apache and other webServer
		uWSGI = completely python based
		
		-------------------
		pip install uwsgi
		------------------
	Action 4 - Deploy to Gunicorn (G Unicorn)
		-------------------
		pip install gunicorn
		------------------
		
	Action 5 - Deploy to Nginx (This is the web server where Gunicore is running on) - pronouce as (engine-x) 
		
		

Step 1 - Django Concetps:
	- BSD license: Berkeley Software Distribution (BSD)
	- Open source

Step 2 - 	
	
	
========================================================================================
************* Section - uWSGI and Nginx  with Flask & Django *********************
==========================================================================================
Deploy Django to uWSGI on Nginx = Full tutorial 
https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html
the web client <-> the web server <-> the socket <-> uwsgi <-> Django

	

End to end deploy flask to UWSGI on Nginx
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uswgi-and-nginx-on-ubuntu-18-04
General Steps
Step 1 - Build one page flask application => run with Jupyter in virtualenv => Anaconda Prompt 3
	----------
	from flask import Flask
	app = Flask(__name__)
	---------------

Step 2 - Wrap flask py file with uWSGI and run it with uwsgi
	Action 1 - coding:
		- create wsgi.py to invoke flask.py
		----------------------
		from myproject import app
		
		if __name__ == "__main__":
    		app.run()
		----------------------
	Action 2 - run app with uWSGI
		uwsgi --socket 0.0.0.0:5000 --protocol=http -w wsgi:app
	Action 3 - Configure uWSGI to run it from system'
		~/myproject/myproject.ini
		--------------------
		[uwsgi]
		module = wsgi:app
		.....
		-------------------------
	Action 4 - Configure system files and start the project as wsgi app
		/etc/systemd/system/myproject.service
		----------------------
		[Unit]
		Description=uWSGI instance to serve myproject
		After=network.target
		xxxxx
		----------------------
		$sudo systemctl start myproject
Step 3 - Enable package on Nginx 
/etc/nginx/sites-available/myproject
---------------------------
server {
    listen 80;
    server_name your_domain www.your_domain;

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/home/sammy/myproject/myproject.sock;
    }
}
---------------------------
	Then, you do not need to start project, you only start the Nginx, then, the app will be up

End to End deploy Flask to Gunicorn on Nginx
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-14-04

General Steps
Step 1 - Build one page flask application => run with Jupyter in virtualenv => Anaconda Prompt 3
	----------
	from flask import Flask
	application = Flask(__name__)
	
	@application.route("/")
	def hello():
	    return "<h1 style='color:blue'>Hello There!</h1>"
	
	if __name__ == "__main__":
    	application.run(host='0.0.0.0')
    
	---------------
	
	Test run on Jupyter under anaconda prompt 3
	
Step 2 - Create WSGI entry 
	~/myproject/wsgi.py
	-------------------
	from myproject import application
	
	if __name__ == "__main__":
    	application.run()
	
	----------------------


Step 3 - Test run with gunicorn: (gunicorn work with WSGI)
	gunicorn --bind 0.0.0.0:8000 wsgi

Step 4 - system configure to make the service on daemon level
	sudo nano /etc/init/myproject.conf

Step 5 - Configure Nginx to run app on server side
/etc/nginx/sites-available/myproject
------------------------------
server {
    listen 80;
    server_name server_domain_or_IP;

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/user/myproject/myproject.sock;
    }
}
------------------------------

=============================================================
************* Section - Flask *********************
=============================================================

https://www.tutorialspoint.com/flask/index.htm
Step 1 - Concepts:
	Flask = web Framework = have packages and take care of communications and response HTTP and other request
	Flask = based on WSGI 
	WSGI (Web Service Gateway Interface)
		- Werkzeug (werk zoug ): this is a package to handle request and response
		- Jinga2 - templating engine
		


Python connect to HBase:
- Option 1: HappyBase:
	Python read from HBased Thrift API
---------------
https://happybase.readthedocs.io/en/latest/index.html
--------------------------------
import happybase

connection = happybase.Connection('hostname')
table = connection.table('table-name')

table.put(b'row-key', {b'family:qual1': b'value1',
                       b'family:qual2': b'value2'})

row = table.row(b'row-key')
print(row[b'family:qual1'])  # prints 'value1'

for key, data in table.rows([b'row-key-1', b'row-key-2']):
    print(key, data)  # prints row key and data for each row

for key, data in table.scan(row_prefix=b'row'):
    print(key, data)  # prints 'value1' and 'value2'

row = table.delete(b'row-key')

--------------------


- Option 2: PySpark
	How to test - Python need to connect to PySpark all the time
https://diogoalexandrefranco.github.io/interacting-with-hbase-from-pyspark/
-----------------------

-------------------------

Swagger 
https://realpython.com/flask-connexion-rest-api/
	- Swagger + rendering through template

Following note is based on this link
http://michal.karzynski.pl/blog/2016/06/19/building-beautiful-restful-apis-using-flask-swagger-ui-flask-restplus/
Flask MicroService with Restful and Swagger
Step 1 - Concepts
	- Micro-Framework = lightweight
	- Flask extensions can add rich = Emergent design 
	- Flask-Restplus = interact with Swagger UI
	- Swagger UI: generate visulizing RESTFul web services
	
Step 2 - Download teh sample code
cd C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo
git clone https://github.com/postrational/rest_api_demo

cd C:\Users\yuntliu\Documents\workstation\Study\python\flask
jupyter notebook

Start pycharm inside anaconda prompt 3
C:\java\pyCharm\bin\pycharm.exe
File -> open -> C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\rest_api_demo
	File -> settings -> Project Interpreter -> show all => + new environment:
		Python 3.7
run-> edit config
	Script path: C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\rest_api_demo\setup.py
	Parameters: develop
	
	app
	Script path: C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\rest_api_demo\rest_api_demo\app.py
	
Swagger UI:
http://localhost:8888/api/

Get the json file for swagger
http://localhost:8888/api/swagger.json

Step 3 - Create First Flask with Swagger
	Action 1 - Create empty project
Start pycharm inside anaconda prompt 3
C:\java\pyCharm\bin\pycharm.exe
File -> new project -> C:/Users/yuntliu/Documents/workstation/Study/python/flask/demo/SwaggerExample/
	File -> settings -> Project Interpreter -> show all => + new environment:
		Python 3.7
- Above will create a project
	Action 2 - Create templates folder and simple rentering file
		- HTML files need to be put here => otherwise error
		- xxx.py file need to be on the same folder level with templates

under root / folder: server.py
---------------------
from flask import (
    Flask,
    render_template
)

# Create the application instance
app = Flask(__name__, template_folder="templates")

# Create a URL route in our application for "/"
@app.route('/')
def home():
    """
    This function just responds to the browser ULR
    localhost:5000/

    :return:        the rendered template 'home.html'
    """
    return render_template('home.html')

# If we're running in stand alone mode, run the application
if __name__ == '__main__':
    app.run(debug=True)

-----------------------

under /templates/home.html
------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Application Home Page</title>
</head>
<body>
    <h2>
        Hello World!
    </h2>
</body>
</html>
------------------------------
	Action 3 - Test the swagger doc:
	use flask_restplus
------------------
from flask import Flask
from flask_restplus import Resource, Api

app = Flask(__name__)                  #  Create a Flask WSGI application
api = Api(app)                         #  Create a Flask-RESTPlus API

@api.route('/hello')                   #  Create a URL route to this resource
class HelloWorld(Resource):            #  Create a RESTful resource
    def get(self):                     #  Create GET endpoint
        return {'hello': 'world'}

if __name__ == '__main__':
    app.run(debug=True)                #  Start a development server
----------------------------


Swagger ui (default)
http://127.0.0.1:5000

Swagger json file:
http://127.0.0.1:5000/swagger.json


	Action 5 - More advanced JSON restful
http://blog.luisrei.com/articles/flaskrest.html

=============================================================================

Step 4 - Write class for it:
https://docs.python.org/3/tutorial/classes.html


=============================================================================
Step 5 - Unit Test:
https://docs.python.org/3/library/unittest.html
Action 1 - Install pytest and unittest
File -> new project -> C:/Users/yuntliu/Documents/workstation/Study/python/flask/demo/SwaggerExample/
	File -> settings - project interpreter => + add package
		pytest
		unittest
		pip if need to upgrade
		(use pip install if needed)
Action 2 - create Testing package:
SwaggerExample (Folder)
	templates (Folder)
	TestHome (Folder)
		simpleTest.py
	simple.py
	
Run simpleTest.py from C:/Users/yuntliu/Documents/workstation/Study/python/flask/demo/SwaggerExample
	(There is another sub folder called SwaggerExample)
cd C:/Users/yuntliu/Documents/workstation/Study/python/flask/demo/SwaggerExample
python SwaggerExample/TestHome/simpleTest.py

Run from Pycharm:
Run -> edit configuration
	Script Path:C:/Users/yuntliu/Documents/workstation/Study/python/flask/demo/SwaggerExample/SwaggerExample/TestHome/simpleTest.py
	Working directory: C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\SwaggerExample

code:
-------------------------
import unittest
from SwaggerExample.simple import TestingFunc
from SwaggerExample.simple import HelloWorld

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

    def test_multi(self):
        self.assertTrue(TestingFunc(2,4).getMultiple() == 8)
    def test_get(self):
        print (HelloWorld().get())
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()
-------------------------






Step 5 - Restful - advanced setup -> json beatiy
https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask
https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask
https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask



	Action 5 - More advanced JSON restful
http://blog.luisrei.com/articles/flaskrest.html



====================================
Step 6 - logging 
--------------
https://realpython.com/python-logging/
https://docs.python.org/3/library/logging.html#logging.basicConfig
Python 2.7 and older handler
https://stackoverflow.com/questions/13733552/logger-configuration-to-log-to-file-and-print-to-stdout

-------------------------------
Step 1 - Root logger = Default logger
-----------
import logging
logging.basicConfig(filename='app.log',level=logging.DEBUG, filemode='w',
                    #format='%(name)s - %(levelname)s - %(message)s')
                    format='%(asctime)s - %(message)s')
                    #format='%(process)d-%(levelname)s-%(message)s')
logging.basicConfig(level=logging.WARNING)
# basicCOnfig has to be right after import logging
# all other logging function will call the logging handler => will invoke the default log handler
# then, the basicCOnfig will not work since the root handler already created

logging.warning('This will get logged to a file')
# This will also invoke the Root logger handler => it will make the new basicConfig stop working
# https://docs.python.org/3/library/logging.html#logging.basicConfig
# The above has all the default variables


logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')

logging.critical('default logger level is Warning')

### change the default logger level
logging.basicConfig(level=logging.DEBUG)
logging.debug('This will get logged')

message = 'something'
logging.debug('%s is the message to be displayed', message)

# format the logging message
logging.debug(f'{message} is displayed as f-string')
print("something")

# give error tracking of logger
a = 5
b = 0

try:
  c = a / b
except Exception as e:
  logging.error("Exception occurred" , exc_info=True)

a = 5
b = 0
try:
  c = a / b
except Exception as e:
  logging.exception("Exception occurred")
----------------------------------------------------

Step 2 - Hand coded handler output to console and file
------------------------------
import logging

logger = logging.getLogger(__name__)
logger.warning('this is a warning')

# logging to console
c_handler = logging.StreamHandler()
c_handler.setLevel(logging.WARNING)
c_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
c_handler.setFormatter(c_format)
logger.addHandler(c_handler)

# logging to file
f_handler = logging.FileHandler('file.log')
f_handler.setLevel(logging.WARNING)
f_format = logging.Formatter('%(asctime)s | %(name)s | %(levelname)s | %(message)s')
f_handler.setFormatter(f_format)
logger.addHandler(f_handler)

logger.warning('This is a warning')
logger.error('This is a error')

-------------------------------
Step 3 - Use configuration file
	Action 1 - file.conf
-----------------
[loggers]
keys=root,sLogger

[handlers]
keys=consoleHandler,fileHandler

[formatters]
keys=fileFormatter,consoleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_sLogger]
level=DEBUG
handlers=consoleHandler,fileHandler
qualname=sLogger
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=WARNING
formatter=consoleFormatter
args=(sys.stdout,)

[handler_fileHandler]
class=FileHandler
level=DEBUG
formatter=fileFormatter
#args=('logfile.log',)
args=(os.environ["CogxLog"],'midnight',1,5)
	- this will load it from the system environment variables
	
[formatter_fileFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=

[formatter_consoleFormatter]
format=%(asctime)s | %(name)s | %(levelname)s | %(message)s
datefmt=
-----------------------------
	Action 2 - Code
C:\Users\yuntliu\.virtualenvs\rest_api_demo\Scripts\python.exe C:/Users/yuntliu/Documents/workstation/Study/python/flask/demo/SwaggerExample/SwaggerExample
-------------------
import logging
import logging.config

logging.config.fileConfig(fname='file.conf', disable_existing_loggers=False)

# Get the logger specified in the file
# root logger can be used on everything
logger = logging.getLogger(__name__)
logger = logging.getLogger('sLogger')
logger.debug('This is a debug message')
logger.warning('This is a debug message')




# log something
logger.debug('debug message')
logger.info('info message')
logger.error('error message')
logger.critical('critical message')

# give error tracking of logger
a = 5
b = 0

try:
  c = a / b
except Exception as e:
    logger.error("Exception occurred" , exc_info=True)

a = 5
b = 0
try:
  c = a / b
except Exception as e:
    logger.exception("Exception occurred")
-----------------------------


=======================================
Step 7 - Payload Validation
https://aviaryan.com/blog/gsoc/restplus-validation-custom-fields



=========================
Try to run ds-cogx-api - Anthem Python API
------------
On Anaconda Prompt 3:
---------------------
cd C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\ds-cogx-api\ds-cogx-api

conda env list
conda env create -f env/environment_win.yml 
#conda env remove cognitive-claims

conda activate cognitive-claims
      - now, you are inside the virtual env
      - Not working on deloitte machine
     (Then, you can run python src/app.py)
     ========= This works on Anthem machine

pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org xgboost==0.81
pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org gunicorn==19.9.0

conda install -f packaging
	- if missing any packages: 
	

                
pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org xgboost==0.81
	-- By pass the SSL cert issue 
conda env list

To use pycharm on this:
                File -> settings -> project interpreter -> Show all -> add -> VirtualEvn -> existing -> C:\java\anaconda\anaconda3\envs\cognitive-claims
                File -> settings -> project structure -> specify src/* src-lib/*as src

--------------------
- conda env set up not always work 
- The above not always work = Because conda sometime conflict with PyCharm

----------------------
 The following works with deloitte machine

---------------------
anacondo prompty 3
(From base )
C:\java\pyCharm\bin\pycharm.exe
Open project at C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\ds-cogx-api\ds-cogx-api
File -> settings -> project interpreter -> new environment -> + virtual environment 
	- Manually add the following:
-------------
name: cognitive-claims
channels:
  - conda-forge
  - anaconda
  - defaults
dependencies:
  - numpy==1.15.1
  - pandas==0.23.4
  - pickleshare==0.7.4
  - pyhamcrest==1.9.0
  - scikit-image==0.14.0
  - scikit-learn==0.20.0
  - scipy==1.1.0
#  - xgboost==0.81
  - flasgger==0.9.2
  - flask==1.0.2
#  - gunicorn==19.9.0
  - python==3.7.0
  - htmlmin==0.1.12
  - requests==2.21.0
  - requests-kerberos==0.12.0
  - flask-restplus
  - pytest
prefix: /usr/local/envs/cognitive-claims
--------------
- Then start src/app.py

http://localhost:9080/apidocs

 
-------------------------

{"header": {"KEY_CHK_DCN_NBR": "171107A7856", "CURNT_QUE_UNIT_NBR": "U1", "CLM_CMPLTN_DT": "12/31/9999", "TOTL_CHRG_AMT": "378.94", "BSIC_PAYMNT_AMT": "0.00", "MM_PAY_AMT": "0.00", "CLM_PAYMNT_ACTN_1_CD": "*", "CLM_PAYMNT_ACTN_2_6_CD": "*", "ICD_A_CD": "J329", "ICD_B_CD": "*", "ICD_C_CD": "*", "ICD_D_CD": "*", "ICD_E_CD": "*", "ICD_OTHR_1_CD": "*", "ICD_OTHR_2_CD": "*", "ICD_OTHR_3_CD": "*", "ICD_OTHR_4_CD": "*", "ICD_OTHR_5_CD": "*", "MBU_CD": "I", "FULL_MNGMNT_BU_CD": "60U1A13X", "PROV_IND": "Y", "ATCHMNT_IND": "Y ", "CLM_TYPE_CD": "PM", "EDI_CLM_FLNG_IND": "* ", "PROV_TAX_ID": "952628283", "PROV_ZIP_5_CD": "92863", "PROV_ZIP_4_CD": "1405", "PROV_CITY_NM": "ORANGE", "PROV_ST_CD": "CA", "MEMBER_SSN": "378625793", "SBSCRBR_ZIP_5_CD": "91801", "SBSCRBR_ZIP_4_CD": "*", "SBSCRBR_CITY_NM": "ALHAMBRA", "SBSCRBR_ST_CD": "CA", "SRVC_TYPE_CURNT_CD": "* ", "SRVC_TYPE_ORGNL_CD": "* ", "ORGNL_ENTRY_DT": "1/16/2019", "SRVC_FROM_DT": "4/19/2017", "SRVC_THRU_DT": "4/19/2017", "COB_BSIC_PAYMNT_AMT": "0.00", "COB_MM_PAYMNT_AMT": "0.00", "COB_SGMNT_CNT": "0", "MEDCR_CNT": "1", "PAT_AGE_NBR": "64", "MK_FUND_TYPE_CD": "A", "ENCNTR_IND": "*", "PRVDR_STATUS": "PAR", "CLAIM_TYPE": "PROF", "PROD_NTWK": "PPO", "TAX_LIC_SPLTYCDE": "*", "TYPE_OF_BILL_CD": "*", "CLM_FILE_COB_IND": "* ", "BILLG_TXNMY_CD": "*", "RNDRG_TXNMY_CD": "*", "RNDRG_TAX_ID": "*"}, "edits": [{"KEY_CHK_DCN_NBR": "171107A7856", "CURNT_QUE_UNIT_NBR": "U1", "CLM_CMPLTN_DT": "12/31/9999", "AUDT_IN_DTM": "1/16/2019 11:28:24.000000", "ERR_1_CD": "DF ", "ERR_2_CD": "N01", "ERR_3_CD": "WGP", "ERR_4_CD": "196", "ERR_5_CD": "QT1", "ERR_6_CD": "SRW", "ERR_7_CD": "SEQ", "ERR_8_CD": "*  ", "ERR_9_CD": "*  ", "ERR_10_CD": "*  ", "ERR_11_CD": "*  ", "ERR_12_CD": "*  ", "ERR_13_CD": "*  "}, {"KEY_CHK_DCN_NBR": "171107A7856", "CURNT_QUE_UNIT_NBR": "U1", "CLM_CMPLTN_DT": "12/31/9999", "AUDT_IN_DTM": "1/16/2019 11:44:09.000000", "ERR_1_CD": "DF ", "ERR_2_CD": "WGP", "ERR_3_CD": "196", "ERR_4_CD": "QT1", "ERR_5_CD": "SRW", "ERR_6_CD": "SEQ", "ERR_7_CD": "*  ", "ERR_8_CD": "*  ", "ERR_9_CD": "*  ", "ERR_10_CD": "*  ", "ERR_11_CD": "*  ", "ERR_12_CD": "*  ", "ERR_13_CD": "*  "}], "details": [{"KEY_CHK_DCN_NBR": "171107A7856", "CLM_CMPLTN_DT": "12/31/9999", "DTL_LINE_NBR": "01", "MDFR_1_CD": "* ", "MDFR_2_CD": "* ", "MDFR_3_CD": "* ", "PROC_MDFR_CD": "26", "PROC_CD": "70486", "HCPCS_MDFR_CD": "* ", "HCPCS_CD": "*", "BILLD_CHRGD_AMT": "221.20", "MBR_CNTRCT_TYPE_CD": "A", "POT_CD": "1", "TRTMNT_TYPE_CD": "05", "MBR_CNTRCT_CVRG_CD": "X  ", "BNFT_YEAR_CNTRCT_EFCTV_DT": "10/1/2016", "BNFT_YEAR_CNTRCT_REV_DT": "10/1/2016", "MBR_CNTRCT_EFCTV_DT": "2/1/2009", "MBR_CNTRCT_END_DT": "6/1/2017", "SRVC_FROM_DT": "4/19/2017", "SRVC_TO_DT": "4/19/2017", "MEDCRB_APRVD_AMT": "46.94", "MEDCRB_COINSRN_AMT": "9.39", "MEDCRB_DDCTBL_AMT": "0.00", "MEDCRB_PAID_AMT": "36.80", "MBR_CNTRCT_CD": "Z155", "PN_CD": "PB51", "TOS_TYPE_CD": "DXL", "CURNT_QUE_UNIT_NBR": "U1"}, {"KEY_CHK_DCN_NBR": "171107A7856", "CLM_CMPLTN_DT": "12/31/9999", "DTL_LINE_NBR": "02", "MDFR_1_CD": "* ", "MDFR_2_CD": "* ", "MDFR_3_CD": "* ", "PROC_MDFR_CD": "26", "PROC_CD": "76377", "HCPCS_MDFR_CD": "* ", "HCPCS_CD": "*", "BILLD_CHRGD_AMT": "157.74", "MBR_CNTRCT_TYPE_CD": "A", "POT_CD": "1", "TRTMNT_TYPE_CD": "05", "MBR_CNTRCT_CVRG_CD": "X  ", "BNFT_YEAR_CNTRCT_EFCTV_DT": "10/1/2016", "BNFT_YEAR_CNTRCT_REV_DT": "10/1/2016", "MBR_CNTRCT_EFCTV_DT": "2/1/2009", "MBR_CNTRCT_END_DT": "6/1/2017", "SRVC_FROM_DT": "4/19/2017", "SRVC_TO_DT": "4/19/2017", "MEDCRB_APRVD_AMT": "0.00", "MEDCRB_COINSRN_AMT": "0.00", "MEDCRB_DDCTBL_AMT": "0.00", "MEDCRB_PAID_AMT": "0.00", "MBR_CNTRCT_CD": "Z155", "PN_CD": "PB51", "TOS_TYPE_CD": "DXL", "CURNT_QUE_UNIT_NBR": "U1"}]}

----------------------------

Turn off the conda cert issue 
- conda config --set_ssl_verify false

-----------------------------

uuid:
>>> import uuid

>>> # make a UUID based on the host ID and current time
>>> uuid.uuid1()
UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

>>> # make a UUID using an MD5 hash of a namespace UUID and a name
>>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

>>> # make a random UUID
>>> uuid.uuid4()
UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

>>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
>>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

>>> # make a UUID from a string of hex digits (braces and hyphens ignored)
>>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

>>> # convert a UUID to a string of hex digits in standard form
>>> str(x)
'00010203-0405-0607-0809-0a0b0c0d0e0f'

>>> # get the raw 16 bytes of the UUID
>>> x.bytes
'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'

>>> # make a UUID from a 16-byte string
>>> uuid.UUID(bytes=x.bytes)
UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')
==========================================

============================
***** Create sqlite **********
--------------------

Step 1 - start Anaconda Prompt 3 (as administrator) and create db
cd C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\ds-cogx-api\ds-cogx-api
mkdir data
cd data
sqlite3 cogx.db
.mode csv 
.import ../sample/um/UM_auth.txt um
.schema um
.exit
Step 2 - Connect to sqlite with DBvisualizer
	C:\java\DBVisualizer\dbvis.exe

	Tools -> Connection wizard -> driver: sqlite
		- Databasefile

Step 3 - Try both services:
------------------
{  
   "um_claim":{  
      "KEY_CHK_DCN_NBR":"18345CO6693",
      "CURNT_QUE_UNIT_NBR":"F6",
      "CLM_CMPLTN_DT":"12/31/9999",
      "action_code":"P10000",
      "PROV_NM":"GOOD SAMARITAN HOSPITAL",
      "PROV_SCNDRY_NM":"*",
      "DTL_LINE_NBR":"01",
      "ICD_A_CD":"Z3801",
      "ICD_B_CD":"P220",
      "ICD_C_CD":"P612",
      "ICD_D_CD":"P711",
      "ICD_E_CD":"P284",
      "ICD_OTHR_6_CD":"*",
      "ICD_OTHR_7_CD":"*",
      "ICD_OTHR_8_CD":"*",
      "ICD_OTHR_9_CD":"*",
      "ICD_OTHR_10_CD":"*",
      "ICD_OTHR_11_CD":"*",
      "ICD_OTHR_12_CD":"*",
      "ICD_OTHR_13_CD":"*",
      "ICD_OTHR_14_CD":"*",
      "ICD_OTHR_15_CD":"*",
      "ICD_OTHR_16_CD":"*",
      "ICD_OTHR_17_CD":"*",
      "ICD_OTHR_18_CD":"*",
      "ICD_OTHR_19_CD":"*",
      "ICD_OTHR_20_CD":"*",
      "CLAIM_TYPE":"INPT",
      "clm_from_dt":"10/19/2018",
      "clm_to_dt":"12/6/2018",
      "memID":"619543610",
      "PAT_MBR_CD":"50",
      "PROV_TAX_ID":"621763090",
      "bypass_code":"SRUM* * * ",
      "HCFA_PT_CD":"21",
      "PROC_CD":"0171",
      "PROC_MDFR_CD":"* ",
      "HCPCS_CD":"*",
      "HCPCS_MDFR_CD":"* ",
      "dtl_from_dt":"10/19/2018",
      "dtl_to_dt":"12/6/2018",
      "BILLD_SRVC_UNIT_QTY":"1",
      "PN_CD":"IND1",
      "TOS_TYPE_CD":"RAB",
      "POT_CD":"1",
      "UM_CASE_NBR":"*",
      "UM_PROV_SQNC_NBR":"* ",
      "UM_RQRD_IND":"Y",
      "BILLG_NPI":"1437103777"
      "PRVDR_STATUS": 'NON-PAR'
      "CLAIM_TYPE":"INPT"
   }
}
--------------------------------
 
{  
   "header":{  
      "KEY_CHK_DCN_NBR":"171107A7856",
      "CURNT_QUE_UNIT_NBR":"U1",
      "CLM_CMPLTN_DT":"12/31/9999",
      "TOTL_CHRG_AMT":"378.94",
      "BSIC_PAYMNT_AMT":"0.00",
      "MM_PAY_AMT":"0.00",
      "CLM_PAYMNT_ACTN_1_CD":"*",
      "CLM_PAYMNT_ACTN_2_6_CD":"*",
      "ICD_A_CD":"J329",
      "ICD_B_CD":"*",
      "ICD_C_CD":"*",
      "ICD_D_CD":"*",
      "ICD_E_CD":"*",
      "ICD_OTHR_1_CD":"*",
      "ICD_OTHR_2_CD":"*",
      "ICD_OTHR_3_CD":"*",
      "ICD_OTHR_4_CD":"*",
      "ICD_OTHR_5_CD":"*",
      "MBU_CD":"I",
      "FULL_MNGMNT_BU_CD":"60U1A13X",
      "PROV_IND":"Y",
      "ATCHMNT_IND":"Y ",
      "CLM_TYPE_CD":"PM",
      "EDI_CLM_FLNG_IND":"* ",
      "PROV_TAX_ID":"952628283",
      "PROV_ZIP_5_CD":"92863",
      "PROV_ZIP_4_CD":"1405",
      "PROV_CITY_NM":"ORANGE",
      "PROV_ST_CD":"CA",
      "MEMBER_SSN":"378625793",
      "SBSCRBR_ZIP_5_CD":"91801",
      "SBSCRBR_ZIP_4_CD":"*",
      "SBSCRBR_CITY_NM":"ALHAMBRA",
      "SBSCRBR_ST_CD":"CA",
      "SRVC_TYPE_CURNT_CD":"* ",
      "SRVC_TYPE_ORGNL_CD":"* ",
      "ORGNL_ENTRY_DT":"1/16/2019",
      "SRVC_FROM_DT":"4/19/2017",
      "SRVC_THRU_DT":"4/19/2017",
      "COB_BSIC_PAYMNT_AMT":"0.00",
      "COB_MM_PAYMNT_AMT":"0.00",
      "COB_SGMNT_CNT":"0",
      "MEDCR_CNT":"1",
      "PAT_AGE_NBR":"64",
      "MK_FUND_TYPE_CD":"A",
      "ENCNTR_IND":"*",
      "PRVDR_STATUS":"PAR",
      "CLAIM_TYPE":"PROF",
      "PROD_NTWK":"PPO",
      "TAX_LIC_SPLTYCDE":"*",
      "TYPE_OF_BILL_CD":"*",
      "CLM_FILE_COB_IND":"* ",
      "BILLG_TXNMY_CD":"*",
      "RNDRG_TXNMY_CD":"*",
      "RNDRG_TAX_ID":"*"
   },
   "edits":[  
      {  
         "KEY_CHK_DCN_NBR":"171107A7856",
         "CURNT_QUE_UNIT_NBR":"U1",
         "CLM_CMPLTN_DT":"12/31/9999",
         "AUDT_IN_DTM":"1/16/2019 11:28:24.000000",
         "ERR_1_CD":"DF ",
         "ERR_2_CD":"N01",
         "ERR_3_CD":"WGP",
         "ERR_4_CD":"196",
         "ERR_5_CD":"QT1",
         "ERR_6_CD":"SRW",
         "ERR_7_CD":"SEQ",
         "ERR_8_CD":"*  ",
         "ERR_9_CD":"*  ",
         "ERR_10_CD":"*  ",
         "ERR_11_CD":"*  ",
         "ERR_12_CD":"*  ",
         "ERR_13_CD":"*  "
      },
      {  
         "KEY_CHK_DCN_NBR":"171107A7856",
         "CURNT_QUE_UNIT_NBR":"U1",
         "CLM_CMPLTN_DT":"12/31/9999",
         "AUDT_IN_DTM":"1/16/2019 11:44:09.000000",
         "ERR_1_CD":"DF ",
         "ERR_2_CD":"WGP",
         "ERR_3_CD":"196",
         "ERR_4_CD":"QT1",
         "ERR_5_CD":"SRW",
         "ERR_6_CD":"SEQ",
         "ERR_7_CD":"*  ",
         "ERR_8_CD":"*  ",
         "ERR_9_CD":"*  ",
         "ERR_10_CD":"*  ",
         "ERR_11_CD":"*  ",
         "ERR_12_CD":"*  ",
         "ERR_13_CD":"*  "
      }
   ],
   "details":[  
      {  
         "KEY_CHK_DCN_NBR":"171107A7856",
         "CLM_CMPLTN_DT":"12/31/9999",
         "DTL_LINE_NBR":"01",
         "MDFR_1_CD":"* ",
         "MDFR_2_CD":"* ",
         "MDFR_3_CD":"* ",
         "PROC_MDFR_CD":"26",
         "PROC_CD":"70486",
         "HCPCS_MDFR_CD":"* ",
         "HCPCS_CD":"*",
         "BILLD_CHRGD_AMT":"221.20",
         "MBR_CNTRCT_TYPE_CD":"A",
         "POT_CD":"1",
         "TRTMNT_TYPE_CD":"05",
         "MBR_CNTRCT_CVRG_CD":"X  ",
         "BNFT_YEAR_CNTRCT_EFCTV_DT":"10/1/2016",
         "BNFT_YEAR_CNTRCT_REV_DT":"10/1/2016",
         "MBR_CNTRCT_EFCTV_DT":"2/1/2009",
         "MBR_CNTRCT_END_DT":"6/1/2017",
         "SRVC_FROM_DT":"4/19/2017",
         "SRVC_TO_DT":"4/19/2017",
         "MEDCRB_APRVD_AMT":"46.94",
         "MEDCRB_COINSRN_AMT":"9.39",
         "MEDCRB_DDCTBL_AMT":"0.00",
         "MEDCRB_PAID_AMT":"36.80",
         "MBR_CNTRCT_CD":"Z155",
         "PN_CD":"PB51",
         "TOS_TYPE_CD":"DXL",
         "CURNT_QUE_UNIT_NBR":"U1"
      },
      {  
         "KEY_CHK_DCN_NBR":"171107A7856",
         "CLM_CMPLTN_DT":"12/31/9999",
         "DTL_LINE_NBR":"02",
         "MDFR_1_CD":"* ",
         "MDFR_2_CD":"* ",
         "MDFR_3_CD":"* ",
         "PROC_MDFR_CD":"26",
         "PROC_CD":"76377",
         "HCPCS_MDFR_CD":"* ",
         "HCPCS_CD":"*",
         "BILLD_CHRGD_AMT":"157.74",
         "MBR_CNTRCT_TYPE_CD":"A",
         "POT_CD":"1",
         "TRTMNT_TYPE_CD":"05",
         "MBR_CNTRCT_CVRG_CD":"X  ",
         "BNFT_YEAR_CNTRCT_EFCTV_DT":"10/1/2016",
         "BNFT_YEAR_CNTRCT_REV_DT":"10/1/2016",
         "MBR_CNTRCT_EFCTV_DT":"2/1/2009",
         "MBR_CNTRCT_END_DT":"6/1/2017",
         "SRVC_FROM_DT":"4/19/2017",
         "SRVC_TO_DT":"4/19/2017",
         "MEDCRB_APRVD_AMT":"0.00",
         "MEDCRB_COINSRN_AMT":"0.00",
         "MEDCRB_DDCTBL_AMT":"0.00",
         "MEDCRB_PAID_AMT":"0.00",
         "MBR_CNTRCT_CD":"Z155",
         "PN_CD":"PB51",
         "TOS_TYPE_CD":"DXL",
         "CURNT_QUE_UNIT_NBR":"U1"
      }
   ]
}
 
-------------------------------------------------------
=======================================================

Payload Validation
- marshmallow package


decorator
https://realpython.com/primer-on-python-decorators/

@classmethod - Decorator
https://stackabuse.com/pythons-classmethod-and-staticmethod-explained/

========================================================
meaning of the following:
measure_time_elapsed(*args, **kwargs):
========================================================
---------------------------------
To use Flexible Parameters:
---------------------------------------
Function Parameters:
------------------------
*args
- this is flexible parameters
------------------------------------------
# Define gibberish
def gibberish(*args):
    """Concatenate strings in *args together."""

    # Initialize an empty string: hodgepodge
    hodgepodge=""
    

    # Concatenate the strings in args
    for word in args:
        hodgepodge += word

    # Return hodgepodge
    
    return hodgepodge

# Call gibberish() with one string: one_word
one_word = gibberish('luke')

# Call gibberish() with five strings: many_words
many_words = gibberish("luke", "leia", "han", "obi", "darth")

# Print one_word and many_words
print(one_word)
print(many_words)

To use dictionary parameters:
-----------------------------------------------
**args
-this is dictionary parameters
---------------------------
# Define report_status
def report_status(**kwargs):
    """Print out the status of a movie character."""

    print("\nBEGIN: REPORT\n")

    # Iterate over the key-value pairs of kwargs
    for key, value in kwargs.items():
        # Print out the keys and values, separated by a colon ':'
        print(key + ": " + value)

    print("\nEND REPORT")

# First call to report_status()
report_status(name='luke', affiliation='jedi',status='missing')

# Second call to report_status()
report_status(name="anakin", affiliation="sith lord", status="deceased")
----------------------------------------
========================================================
-----------------------------------------


put metaTransID into Log defaule format
- Option 1 - Static value
---------
old_factory = logging.getLogRecordFactory()

def record_factory(*args, **kwargs):
    record = old_factory(*args, **kwargs)
    record.custom_attribute = "static"
    return record

logging.setLogRecordFactory(record_factory)
--------------

- Option 2 - Constant value 

- Problem: singleton 

=======================================================
**** Option 3 - Flask-Log-Request-ID
=======================================================
https://pypi.org/project/Flask-Log-Request-ID/

https://docs.python.org/2/howto/logging-cookbook.html

Step 1 - Concepts:
	- Similar to sprintboot sleuth
		- Generate request IDs and then, could pass through from service to service
		- Could be integrated with logger
Step 2 - Create the first Project with it
	Anaconda prompt 3 
	C:\java\pyCharm\bin\pycharm.exe
	new project: 
		C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\flask-log-request-ID
	new environment:
		python 2.7
	
	File -> settings -> Project interpreter => C:\Users\yuntliu\.virtualenvs\ds-cogx-api\Scripts\python.exe
	
	Create folder = src + test
	
	File -> setting -> project structure -> src = sources
	
Step 3 - Create the first service
	- single file + single service
--------------------------
import logging
import logging.config
from random import randint
from flask import Flask
from flask_log_request_id import RequestID, RequestIDLogFilter, current_request_id
import socket

counter=0
def counterCount():
    global counter
    counter=counter+1
    logging.warning('Global counter is: {}'.format(counter))
    return counter

def generic_add(a, b):
    """Simple function to add two numbers that is not aware of the request id"""
    logging.warning('Called generic_add({}, {})'.format(a, b))
    logging.warning(current_request_id())
    return a + b

app = Flask(__name__)
RequestID(app)

# Setup logging
handler = logging.StreamHandler()
handler.setFormatter(
    logging.Formatter("%(asctime)s - %(name)s - level=%(levelname)s - request_id=%(request_id)s - %(message)s"))
handler.addFilter(RequestIDLogFilter())  # << Add request id contextual filter
logging.getLogger().addHandler(handler)


@app.route('/')
def index():
    a, b = randint(1, 15), randint(1, 15)
    logging.warning('Adding two random numbers {} {}'.format(a, b))
    counterCount()

    return str(generic_add(a, b))

if __name__ == '__main__':
    HOSTNAME = socket.gethostname()
    if HOSTNAME == 'LC02W10KYHTDD.':
        HOSTNAME = 'localhost'
    print(HOSTNAME)
    PORT = 9080
    app.run(host=HOSTNAME, port=PORT, debug=True)
---------------------------------------------------------------

Step 4 - move functions to other file in the same app
	Move functions to another file => no need to re-initiate logger
	

Step 5 - Add Swagger
http://brunorocha.org/python/flask/flasgger-api-playground-with-flask-and-swagger-ui.html
	- Swagger require the """ xxxx """ under each end point function => this will be used to build Swagger

Step 6 - Create flask-log-request-ID-client to invoke the other service to test if the request ID are shared
	- Same setup as flask-log-request-ID
http://www.keithsterling.com/?p=493	

Step 7 - Pass the request ID to next service:
------------------
@app.after_request
def append_request_id(response):
    response.headers.add('X-REQUEST-ID', current_request_id())
    return response
--------------------

Step 8 - Make the formatter as json
C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\flask-log-request-ID-client
C:\Users\yuntliu\Documents\workstation\Study\python\flask\demo\flask-log-request-ID
https://github.com/madzak/python-json-logger
https://github.com/madzak/python-json-logger
https://github.com/Workable/flask-log-request-id

-------------------------------
Step 9 - Use configuration files
https://github.com/madzak/python-json-logger	


Step 10 - use json_log.py => pass request id through meta-transid header and then use json_log.py to add to the logger



Restful service
http://www.keithsterling.com/?p=493


@classmethods
https://stackabuse.com/pythons-classmethod-and-staticmethod-explained/

Flask-log-id
https://pypi.org/project/Flask-Log-Request-ID/

Request-ID
https://pypi.org/project/request-id/


- 
==================================================================================
https://www.blazemeter.com/blog/getting-started-jmeter-basic-tutorial
https://www.blazemeter.com/blog/getting-started-jmeter-basic-tutorial
https://www.testingexcellence.com/jmeter-tutorial-testing-rest-web-services/
Step 1 - Download JMeter
	http://jmeter.apache.org/download_jmeter.cgi
	C:\java\jmeter\install
	apache-jmeter-5.1.1.zip => binary Only
	
Step 2 - run Jmeter
cmd as administrater:
	C:\java\jmeter\apache-jmeter-5.1.1\bin\jmeter.bat

Step 3 - Create the thread plan
	Testplan -> Add -> Threads -> Thread Group
		Name: TG_ds_cogx_api
		Number of THreads = 3
		Ramp-up seconds = 1
		Loop Count = 3
	TG_ds_cogx_api -> add -> HTTP Request
		Name: CognitiveClaimPost_processLRT
		Protocol: http
		Server name or IP: USDENYUNTLIU1
		Port Number: 9080
		Method: POST
		Path: processLTR
		Body Data: {"header": {"KEY_CHK_DCN_NBR": "171107A7856", "CURNT_QUE_UNIT_NBR": "U1", "CLM_CMPLTN_DT": "12/31/9999", "TOTL_CHRG_AMT": "378.94", "BSIC_PAYMNT_AMT": "0.00", "MM_PAY_AMT": "0.00", "CLM_PAYMNT_ACTN_1_CD": "*", "CLM_PAYMNT_ACTN_2_6_CD": "*", "ICD_A_CD": "J329", "ICD_B_CD": "*", "ICD_C_CD": "*", "ICD_D_CD": "*", "ICD_E_CD": "*", "ICD_OTHR_1_CD": "*", "ICD_OTHR_2_CD": "*", "ICD_OTHR_3_CD": "*", "ICD_OTHR_4_CD": "*", "ICD_OTHR_5_CD": "*", "MBU_CD": "I", "FULL_MNGMNT_BU_CD": "60U1A13X", "PROV_IND": "Y", "ATCHMNT_IND": "Y ", "CLM_TYPE_CD": "PM", "EDI_CLM_FLNG_IND": "* ", "PROV_TAX_ID": "952628283", "PROV_ZIP_5_CD": "92863", "PROV_ZIP_4_CD": "1405", "PROV_CITY_NM": "ORANGE", "PROV_ST_CD": "CA", "MEMBER_SSN": "378625793", "SBSCRBR_ZIP_5_CD": "91801", "SBSCRBR_ZIP_4_CD": "*", "SBSCRBR_CITY_NM": "ALHAMBRA", "SBSCRBR_ST_CD": "CA", "SRVC_TYPE_CURNT_CD": "* ", "SRVC_TYPE_ORGNL_CD": "* ", "ORGNL_ENTRY_DT": "1/16/2019", "SRVC_FROM_DT": "4/19/2017", "SRVC_THRU_DT": "4/19/2017", "COB_BSIC_PAYMNT_AMT": "0.00", "COB_MM_PAYMNT_AMT": "0.00", "COB_SGMNT_CNT": "0", "MEDCR_CNT": "1", "PAT_AGE_NBR": "64", "MK_FUND_TYPE_CD": "A", "ENCNTR_IND": "*", "PRVDR_STATUS": "PAR", "CLAIM_TYPE": "PROF", "PROD_NTWK": "PPO", "TAX_LIC_SPLTYCDE": "*", "TYPE_OF_BILL_CD": "*", "CLM_FILE_COB_IND": "* ", "BILLG_TXNMY_CD": "*", "RNDRG_TXNMY_CD": "*", "RNDRG_TAX_ID": "*"}, "edits": [{"KEY_CHK_DCN_NBR": "171107A7856", "CURNT_QUE_UNIT_NBR": "U1", "CLM_CMPLTN_DT": "12/31/9999", "AUDT_IN_DTM": "1/16/2019 11:28:24.000000", "ERR_1_CD": "DF ", "ERR_2_CD": "N01", "ERR_3_CD": "WGP", "ERR_4_CD": "196", "ERR_5_CD": "QT1", "ERR_6_CD": "SRW", "ERR_7_CD": "SEQ", "ERR_8_CD": "*  ", "ERR_9_CD": "*  ", "ERR_10_CD": "*  ", "ERR_11_CD": "*  ", "ERR_12_CD": "*  ", "ERR_13_CD": "*  "}, {"KEY_CHK_DCN_NBR": "171107A7856", "CURNT_QUE_UNIT_NBR": "U1", "CLM_CMPLTN_DT": "12/31/9999", "AUDT_IN_DTM": "1/16/2019 11:44:09.000000", "ERR_1_CD": "DF ", "ERR_2_CD": "WGP", "ERR_3_CD": "196", "ERR_4_CD": "QT1", "ERR_5_CD": "SRW", "ERR_6_CD": "SEQ", "ERR_7_CD": "*  ", "ERR_8_CD": "*  ", "ERR_9_CD": "*  ", "ERR_10_CD": "*  ", "ERR_11_CD": "*  ", "ERR_12_CD": "*  ", "ERR_13_CD": "*  "}], "details": [{"KEY_CHK_DCN_NBR": "171107A7856", "CLM_CMPLTN_DT": "12/31/9999", "DTL_LINE_NBR": "01", "MDFR_1_CD": "* ", "MDFR_2_CD": "* ", "MDFR_3_CD": "* ", "PROC_MDFR_CD": "26", "PROC_CD": "70486", "HCPCS_MDFR_CD": "* ", "HCPCS_CD": "*", "BILLD_CHRGD_AMT": "221.20", "MBR_CNTRCT_TYPE_CD": "A", "POT_CD": "1", "TRTMNT_TYPE_CD": "05", "MBR_CNTRCT_CVRG_CD": "X  ", "BNFT_YEAR_CNTRCT_EFCTV_DT": "10/1/2016", "BNFT_YEAR_CNTRCT_REV_DT": "10/1/2016", "MBR_CNTRCT_EFCTV_DT": "2/1/2009", "MBR_CNTRCT_END_DT": "6/1/2017", "SRVC_FROM_DT": "4/19/2017", "SRVC_TO_DT": "4/19/2017", "MEDCRB_APRVD_AMT": "46.94", "MEDCRB_COINSRN_AMT": "9.39", "MEDCRB_DDCTBL_AMT": "0.00", "MEDCRB_PAID_AMT": "36.80", "MBR_CNTRCT_CD": "Z155", "PN_CD": "PB51", "TOS_TYPE_CD": "DXL", "CURNT_QUE_UNIT_NBR": "U1"}, {"KEY_CHK_DCN_NBR": "171107A7856", "CLM_CMPLTN_DT": "12/31/9999", "DTL_LINE_NBR": "02", "MDFR_1_CD": "* ", "MDFR_2_CD": "* ", "MDFR_3_CD": "* ", "PROC_MDFR_CD": "26", "PROC_CD": "76377", "HCPCS_MDFR_CD": "* ", "HCPCS_CD": "*", "BILLD_CHRGD_AMT": "157.74", "MBR_CNTRCT_TYPE_CD": "A", "POT_CD": "1", "TRTMNT_TYPE_CD": "05", "MBR_CNTRCT_CVRG_CD": "X  ", "BNFT_YEAR_CNTRCT_EFCTV_DT": "10/1/2016", "BNFT_YEAR_CNTRCT_REV_DT": "10/1/2016", "MBR_CNTRCT_EFCTV_DT": "2/1/2009", "MBR_CNTRCT_END_DT": "6/1/2017", "SRVC_FROM_DT": "4/19/2017", "SRVC_TO_DT": "4/19/2017", "MEDCRB_APRVD_AMT": "0.00", "MEDCRB_COINSRN_AMT": "0.00", "MEDCRB_DDCTBL_AMT": "0.00", "MEDCRB_PAID_AMT": "0.00", "MBR_CNTRCT_CD": "Z155", "PN_CD": "PB51", "TOS_TYPE_CD": "DXL", "CURNT_QUE_UNIT_NBR": "U1"}]}

	CognitiveClaimPost_processLRT -> add -> listner -> View Results Tree 
	CognitiveClaimPost_processLRT -> add -> configure element -> HTTP Request Header manager
		add:
			name: content-type
			value: application/json
	CognitiveClaimPost_processLRT -> add -> listner -> view Results in Table
	CognitiveClaimPost_processLRT -> add -> listner -> SummaryReport

Step 4 - Create csv file
C:\java\jmeter\TestPlan\swaggerTest.csv
-------------------------------
{"title": "Shopping book"}
{"title": "cook book"}
{"title": "testing cook book"}
-------------------------------
	SwaggerTest (Thread-group) -> add -> config element -> CSV Data Set Config
		name: CSV Data Set Config
		File: C:/java/jmeter/TestPlan/swaggerTest.csv
		File Encoding: UTF-8
		Variable name: field
		Ignore first line: false
		Delimiter: |
		Allow quated data: False
		Rescycle on EOF: True
		Stop thread on EOF: False
		Sharing mode: all Thread

	SwaggerTest -> BodyData = ${field}		


Step 5 - Manual Run JMeter:
https://www.blazemeter.com/blog/5-ways-launch-jmeter-test-without-using-jmeter-gui
https://blog.e-zest.com/how-to-run-jmeter-in-non-gui-mode/
Option 1: Command Line
cd C:\java\jmeter\TestPlan 
C:\java\jmeter\apache-jmeter-5.1.1\bin\jmeter -n -t CognitiveClaimPost_processLRT.jmx
C:\java\jmeter\apache-jmeter-5.1.1\bin\jmeter -n -t CognitiveClaimPost_processLRT.jmx -l reportResult.csv  -e  -o report
C:\java\jmeter\apache-jmeter-5.1.1\bin\jmeter -n -t SwaggerTest.jmx -l reportResult.csv  -e  -o report2
C:\java\jmeter\apache-jmeter-5.1.1\bin\jmeter -n -t CognitiveClaimPost_processUM.jmx -l reportResult.csv  -e  -o report
--------------------------------------------------


